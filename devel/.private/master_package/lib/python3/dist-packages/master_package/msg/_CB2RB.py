# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from master_package/CB2RB.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CB2RB(genpy.Message):
  _md5sum = "fe34ad25a46974c503b9445f446c64bf"
  _type = "master_package/CB2RB"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Lock Status
bool isRollLocked
bool isYawLocked
bool isPitchLocked 
bool isDepthLocked

# PID
int64 kp_roll
int64 ki_roll
int64 kd_roll
int64 target_stp_roll
int64 kp_pitch
int64 ki_pitch
int64 kd_pitch
int64 target_stp_pitch
int64 kp_yaw
int64 ki_yaw
int64 kd_yaw
int64 target_stp_yaw
int64 kp_depth
int64 ki_depth
int64 kd_depth
int64 target_stp_depth

#kontrol joy
string leftX
string leftY
string rightX
string rightY
string R1
string R2
string L1
string L2

#GY Calibrate
bool isGYCalibrate

"""
  __slots__ = ['isRollLocked','isYawLocked','isPitchLocked','isDepthLocked','kp_roll','ki_roll','kd_roll','target_stp_roll','kp_pitch','ki_pitch','kd_pitch','target_stp_pitch','kp_yaw','ki_yaw','kd_yaw','target_stp_yaw','kp_depth','ki_depth','kd_depth','target_stp_depth','leftX','leftY','rightX','rightY','R1','R2','L1','L2','isGYCalibrate']
  _slot_types = ['bool','bool','bool','bool','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','string','string','string','string','string','string','string','string','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       isRollLocked,isYawLocked,isPitchLocked,isDepthLocked,kp_roll,ki_roll,kd_roll,target_stp_roll,kp_pitch,ki_pitch,kd_pitch,target_stp_pitch,kp_yaw,ki_yaw,kd_yaw,target_stp_yaw,kp_depth,ki_depth,kd_depth,target_stp_depth,leftX,leftY,rightX,rightY,R1,R2,L1,L2,isGYCalibrate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CB2RB, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.isRollLocked is None:
        self.isRollLocked = False
      if self.isYawLocked is None:
        self.isYawLocked = False
      if self.isPitchLocked is None:
        self.isPitchLocked = False
      if self.isDepthLocked is None:
        self.isDepthLocked = False
      if self.kp_roll is None:
        self.kp_roll = 0
      if self.ki_roll is None:
        self.ki_roll = 0
      if self.kd_roll is None:
        self.kd_roll = 0
      if self.target_stp_roll is None:
        self.target_stp_roll = 0
      if self.kp_pitch is None:
        self.kp_pitch = 0
      if self.ki_pitch is None:
        self.ki_pitch = 0
      if self.kd_pitch is None:
        self.kd_pitch = 0
      if self.target_stp_pitch is None:
        self.target_stp_pitch = 0
      if self.kp_yaw is None:
        self.kp_yaw = 0
      if self.ki_yaw is None:
        self.ki_yaw = 0
      if self.kd_yaw is None:
        self.kd_yaw = 0
      if self.target_stp_yaw is None:
        self.target_stp_yaw = 0
      if self.kp_depth is None:
        self.kp_depth = 0
      if self.ki_depth is None:
        self.ki_depth = 0
      if self.kd_depth is None:
        self.kd_depth = 0
      if self.target_stp_depth is None:
        self.target_stp_depth = 0
      if self.leftX is None:
        self.leftX = ''
      if self.leftY is None:
        self.leftY = ''
      if self.rightX is None:
        self.rightX = ''
      if self.rightY is None:
        self.rightY = ''
      if self.R1 is None:
        self.R1 = ''
      if self.R2 is None:
        self.R2 = ''
      if self.L1 is None:
        self.L1 = ''
      if self.L2 is None:
        self.L2 = ''
      if self.isGYCalibrate is None:
        self.isGYCalibrate = False
    else:
      self.isRollLocked = False
      self.isYawLocked = False
      self.isPitchLocked = False
      self.isDepthLocked = False
      self.kp_roll = 0
      self.ki_roll = 0
      self.kd_roll = 0
      self.target_stp_roll = 0
      self.kp_pitch = 0
      self.ki_pitch = 0
      self.kd_pitch = 0
      self.target_stp_pitch = 0
      self.kp_yaw = 0
      self.ki_yaw = 0
      self.kd_yaw = 0
      self.target_stp_yaw = 0
      self.kp_depth = 0
      self.ki_depth = 0
      self.kd_depth = 0
      self.target_stp_depth = 0
      self.leftX = ''
      self.leftY = ''
      self.rightX = ''
      self.rightY = ''
      self.R1 = ''
      self.R2 = ''
      self.L1 = ''
      self.L2 = ''
      self.isGYCalibrate = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B16q().pack(_x.isRollLocked, _x.isYawLocked, _x.isPitchLocked, _x.isDepthLocked, _x.kp_roll, _x.ki_roll, _x.kd_roll, _x.target_stp_roll, _x.kp_pitch, _x.ki_pitch, _x.kd_pitch, _x.target_stp_pitch, _x.kp_yaw, _x.ki_yaw, _x.kd_yaw, _x.target_stp_yaw, _x.kp_depth, _x.ki_depth, _x.kd_depth, _x.target_stp_depth))
      _x = self.leftX
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.leftY
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rightX
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rightY
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.R1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.R2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.L1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.L2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.isGYCalibrate
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 132
      (_x.isRollLocked, _x.isYawLocked, _x.isPitchLocked, _x.isDepthLocked, _x.kp_roll, _x.ki_roll, _x.kd_roll, _x.target_stp_roll, _x.kp_pitch, _x.ki_pitch, _x.kd_pitch, _x.target_stp_pitch, _x.kp_yaw, _x.ki_yaw, _x.kd_yaw, _x.target_stp_yaw, _x.kp_depth, _x.ki_depth, _x.kd_depth, _x.target_stp_depth,) = _get_struct_4B16q().unpack(str[start:end])
      self.isRollLocked = bool(self.isRollLocked)
      self.isYawLocked = bool(self.isYawLocked)
      self.isPitchLocked = bool(self.isPitchLocked)
      self.isDepthLocked = bool(self.isDepthLocked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftX = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.leftX = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftY = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.leftY = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rightX = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rightX = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rightY = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rightY = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.R1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.R1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.R2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.R2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.L1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.L1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.L2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.L2 = str[start:end]
      start = end
      end += 1
      (self.isGYCalibrate,) = _get_struct_B().unpack(str[start:end])
      self.isGYCalibrate = bool(self.isGYCalibrate)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B16q().pack(_x.isRollLocked, _x.isYawLocked, _x.isPitchLocked, _x.isDepthLocked, _x.kp_roll, _x.ki_roll, _x.kd_roll, _x.target_stp_roll, _x.kp_pitch, _x.ki_pitch, _x.kd_pitch, _x.target_stp_pitch, _x.kp_yaw, _x.ki_yaw, _x.kd_yaw, _x.target_stp_yaw, _x.kp_depth, _x.ki_depth, _x.kd_depth, _x.target_stp_depth))
      _x = self.leftX
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.leftY
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rightX
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.rightY
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.R1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.R2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.L1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.L2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.isGYCalibrate
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 132
      (_x.isRollLocked, _x.isYawLocked, _x.isPitchLocked, _x.isDepthLocked, _x.kp_roll, _x.ki_roll, _x.kd_roll, _x.target_stp_roll, _x.kp_pitch, _x.ki_pitch, _x.kd_pitch, _x.target_stp_pitch, _x.kp_yaw, _x.ki_yaw, _x.kd_yaw, _x.target_stp_yaw, _x.kp_depth, _x.ki_depth, _x.kd_depth, _x.target_stp_depth,) = _get_struct_4B16q().unpack(str[start:end])
      self.isRollLocked = bool(self.isRollLocked)
      self.isYawLocked = bool(self.isYawLocked)
      self.isPitchLocked = bool(self.isPitchLocked)
      self.isDepthLocked = bool(self.isDepthLocked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftX = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.leftX = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftY = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.leftY = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rightX = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rightX = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rightY = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rightY = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.R1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.R1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.R2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.R2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.L1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.L1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.L2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.L2 = str[start:end]
      start = end
      end += 1
      (self.isGYCalibrate,) = _get_struct_B().unpack(str[start:end])
      self.isGYCalibrate = bool(self.isGYCalibrate)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B16q = None
def _get_struct_4B16q():
    global _struct_4B16q
    if _struct_4B16q is None:
        _struct_4B16q = struct.Struct("<4B16q")
    return _struct_4B16q
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
