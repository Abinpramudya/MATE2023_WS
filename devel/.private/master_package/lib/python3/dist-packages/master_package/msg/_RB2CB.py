# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from master_package/RB2CB.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RB2CB(genpy.Message):
  _md5sum = "40f3113b257b1d34d4bcd7bdbef4a34d"
  _type = "master_package/RB2CB"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Overall Robot Status
int64 voltage
int64 pressure
int64 temperature
int64 actual_depth
int64 actual_roll  
int64 actual_pitch
int64 actual_yaw
bool isAutonomous

# PID 
int64 kp_roll
int64 ki_roll
int64 kd_roll
int64 target_stp_roll
int64 monitor_stp_roll
int64 kp_pitch
int64 ki_pitch
int64 kd_pitch
int64 target_stp_pitch
int64 monitor_stp_pitch
int64 kp_yaw
int64 ki_yaw
int64 kd_yaw
int64 target_stp_yaw
int64 monitor_stp_yaw
int64 kp_depth
int64 ki_depth
int64 kd_depth
int64 target_stp_depth
int64 monitor_stp_depth

# Lock Status
bool isRollLocked
bool isYawLocked
bool isPitchLocked 
bool isDepthLocked

# Thrusters
int64 throttle
int64 thruster_FR
int64 thruster_FL
int64 thruster_CR
int64 thruster_CL
int64 thruster_BR
int64 thruster_BL
int64 thruster_BC

# PID Mode
string PID_DepthMode
string PID_StabilizeMode

# Mission Reserved Button
# Circle Button
string Mission1_Mode
# Cross Button
string Mission2_Mode
# Start Button
string Mission3_Status
# Select Button
string Mission4_Status

# Gripper
int64 stepper_degree
bool pneumatic_status"""
  __slots__ = ['voltage','pressure','temperature','actual_depth','actual_roll','actual_pitch','actual_yaw','isAutonomous','kp_roll','ki_roll','kd_roll','target_stp_roll','monitor_stp_roll','kp_pitch','ki_pitch','kd_pitch','target_stp_pitch','monitor_stp_pitch','kp_yaw','ki_yaw','kd_yaw','target_stp_yaw','monitor_stp_yaw','kp_depth','ki_depth','kd_depth','target_stp_depth','monitor_stp_depth','isRollLocked','isYawLocked','isPitchLocked','isDepthLocked','throttle','thruster_FR','thruster_FL','thruster_CR','thruster_CL','thruster_BR','thruster_BL','thruster_BC','PID_DepthMode','PID_StabilizeMode','Mission1_Mode','Mission2_Mode','Mission3_Status','Mission4_Status','stepper_degree','pneumatic_status']
  _slot_types = ['int64','int64','int64','int64','int64','int64','int64','bool','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','bool','bool','bool','bool','int64','int64','int64','int64','int64','int64','int64','int64','string','string','string','string','string','string','int64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       voltage,pressure,temperature,actual_depth,actual_roll,actual_pitch,actual_yaw,isAutonomous,kp_roll,ki_roll,kd_roll,target_stp_roll,monitor_stp_roll,kp_pitch,ki_pitch,kd_pitch,target_stp_pitch,monitor_stp_pitch,kp_yaw,ki_yaw,kd_yaw,target_stp_yaw,monitor_stp_yaw,kp_depth,ki_depth,kd_depth,target_stp_depth,monitor_stp_depth,isRollLocked,isYawLocked,isPitchLocked,isDepthLocked,throttle,thruster_FR,thruster_FL,thruster_CR,thruster_CL,thruster_BR,thruster_BL,thruster_BC,PID_DepthMode,PID_StabilizeMode,Mission1_Mode,Mission2_Mode,Mission3_Status,Mission4_Status,stepper_degree,pneumatic_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RB2CB, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.voltage is None:
        self.voltage = 0
      if self.pressure is None:
        self.pressure = 0
      if self.temperature is None:
        self.temperature = 0
      if self.actual_depth is None:
        self.actual_depth = 0
      if self.actual_roll is None:
        self.actual_roll = 0
      if self.actual_pitch is None:
        self.actual_pitch = 0
      if self.actual_yaw is None:
        self.actual_yaw = 0
      if self.isAutonomous is None:
        self.isAutonomous = False
      if self.kp_roll is None:
        self.kp_roll = 0
      if self.ki_roll is None:
        self.ki_roll = 0
      if self.kd_roll is None:
        self.kd_roll = 0
      if self.target_stp_roll is None:
        self.target_stp_roll = 0
      if self.monitor_stp_roll is None:
        self.monitor_stp_roll = 0
      if self.kp_pitch is None:
        self.kp_pitch = 0
      if self.ki_pitch is None:
        self.ki_pitch = 0
      if self.kd_pitch is None:
        self.kd_pitch = 0
      if self.target_stp_pitch is None:
        self.target_stp_pitch = 0
      if self.monitor_stp_pitch is None:
        self.monitor_stp_pitch = 0
      if self.kp_yaw is None:
        self.kp_yaw = 0
      if self.ki_yaw is None:
        self.ki_yaw = 0
      if self.kd_yaw is None:
        self.kd_yaw = 0
      if self.target_stp_yaw is None:
        self.target_stp_yaw = 0
      if self.monitor_stp_yaw is None:
        self.monitor_stp_yaw = 0
      if self.kp_depth is None:
        self.kp_depth = 0
      if self.ki_depth is None:
        self.ki_depth = 0
      if self.kd_depth is None:
        self.kd_depth = 0
      if self.target_stp_depth is None:
        self.target_stp_depth = 0
      if self.monitor_stp_depth is None:
        self.monitor_stp_depth = 0
      if self.isRollLocked is None:
        self.isRollLocked = False
      if self.isYawLocked is None:
        self.isYawLocked = False
      if self.isPitchLocked is None:
        self.isPitchLocked = False
      if self.isDepthLocked is None:
        self.isDepthLocked = False
      if self.throttle is None:
        self.throttle = 0
      if self.thruster_FR is None:
        self.thruster_FR = 0
      if self.thruster_FL is None:
        self.thruster_FL = 0
      if self.thruster_CR is None:
        self.thruster_CR = 0
      if self.thruster_CL is None:
        self.thruster_CL = 0
      if self.thruster_BR is None:
        self.thruster_BR = 0
      if self.thruster_BL is None:
        self.thruster_BL = 0
      if self.thruster_BC is None:
        self.thruster_BC = 0
      if self.PID_DepthMode is None:
        self.PID_DepthMode = ''
      if self.PID_StabilizeMode is None:
        self.PID_StabilizeMode = ''
      if self.Mission1_Mode is None:
        self.Mission1_Mode = ''
      if self.Mission2_Mode is None:
        self.Mission2_Mode = ''
      if self.Mission3_Status is None:
        self.Mission3_Status = ''
      if self.Mission4_Status is None:
        self.Mission4_Status = ''
      if self.stepper_degree is None:
        self.stepper_degree = 0
      if self.pneumatic_status is None:
        self.pneumatic_status = False
    else:
      self.voltage = 0
      self.pressure = 0
      self.temperature = 0
      self.actual_depth = 0
      self.actual_roll = 0
      self.actual_pitch = 0
      self.actual_yaw = 0
      self.isAutonomous = False
      self.kp_roll = 0
      self.ki_roll = 0
      self.kd_roll = 0
      self.target_stp_roll = 0
      self.monitor_stp_roll = 0
      self.kp_pitch = 0
      self.ki_pitch = 0
      self.kd_pitch = 0
      self.target_stp_pitch = 0
      self.monitor_stp_pitch = 0
      self.kp_yaw = 0
      self.ki_yaw = 0
      self.kd_yaw = 0
      self.target_stp_yaw = 0
      self.monitor_stp_yaw = 0
      self.kp_depth = 0
      self.ki_depth = 0
      self.kd_depth = 0
      self.target_stp_depth = 0
      self.monitor_stp_depth = 0
      self.isRollLocked = False
      self.isYawLocked = False
      self.isPitchLocked = False
      self.isDepthLocked = False
      self.throttle = 0
      self.thruster_FR = 0
      self.thruster_FL = 0
      self.thruster_CR = 0
      self.thruster_CL = 0
      self.thruster_BR = 0
      self.thruster_BL = 0
      self.thruster_BC = 0
      self.PID_DepthMode = ''
      self.PID_StabilizeMode = ''
      self.Mission1_Mode = ''
      self.Mission2_Mode = ''
      self.Mission3_Status = ''
      self.Mission4_Status = ''
      self.stepper_degree = 0
      self.pneumatic_status = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7qB20q4B8q().pack(_x.voltage, _x.pressure, _x.temperature, _x.actual_depth, _x.actual_roll, _x.actual_pitch, _x.actual_yaw, _x.isAutonomous, _x.kp_roll, _x.ki_roll, _x.kd_roll, _x.target_stp_roll, _x.monitor_stp_roll, _x.kp_pitch, _x.ki_pitch, _x.kd_pitch, _x.target_stp_pitch, _x.monitor_stp_pitch, _x.kp_yaw, _x.ki_yaw, _x.kd_yaw, _x.target_stp_yaw, _x.monitor_stp_yaw, _x.kp_depth, _x.ki_depth, _x.kd_depth, _x.target_stp_depth, _x.monitor_stp_depth, _x.isRollLocked, _x.isYawLocked, _x.isPitchLocked, _x.isDepthLocked, _x.throttle, _x.thruster_FR, _x.thruster_FL, _x.thruster_CR, _x.thruster_CL, _x.thruster_BR, _x.thruster_BL, _x.thruster_BC))
      _x = self.PID_DepthMode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.PID_StabilizeMode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Mission1_Mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Mission2_Mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Mission3_Status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Mission4_Status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qB().pack(_x.stepper_degree, _x.pneumatic_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 285
      (_x.voltage, _x.pressure, _x.temperature, _x.actual_depth, _x.actual_roll, _x.actual_pitch, _x.actual_yaw, _x.isAutonomous, _x.kp_roll, _x.ki_roll, _x.kd_roll, _x.target_stp_roll, _x.monitor_stp_roll, _x.kp_pitch, _x.ki_pitch, _x.kd_pitch, _x.target_stp_pitch, _x.monitor_stp_pitch, _x.kp_yaw, _x.ki_yaw, _x.kd_yaw, _x.target_stp_yaw, _x.monitor_stp_yaw, _x.kp_depth, _x.ki_depth, _x.kd_depth, _x.target_stp_depth, _x.monitor_stp_depth, _x.isRollLocked, _x.isYawLocked, _x.isPitchLocked, _x.isDepthLocked, _x.throttle, _x.thruster_FR, _x.thruster_FL, _x.thruster_CR, _x.thruster_CL, _x.thruster_BR, _x.thruster_BL, _x.thruster_BC,) = _get_struct_7qB20q4B8q().unpack(str[start:end])
      self.isAutonomous = bool(self.isAutonomous)
      self.isRollLocked = bool(self.isRollLocked)
      self.isYawLocked = bool(self.isYawLocked)
      self.isPitchLocked = bool(self.isPitchLocked)
      self.isDepthLocked = bool(self.isDepthLocked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.PID_DepthMode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.PID_DepthMode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.PID_StabilizeMode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.PID_StabilizeMode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mission1_Mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Mission1_Mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mission2_Mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Mission2_Mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mission3_Status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Mission3_Status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mission4_Status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Mission4_Status = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.stepper_degree, _x.pneumatic_status,) = _get_struct_qB().unpack(str[start:end])
      self.pneumatic_status = bool(self.pneumatic_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7qB20q4B8q().pack(_x.voltage, _x.pressure, _x.temperature, _x.actual_depth, _x.actual_roll, _x.actual_pitch, _x.actual_yaw, _x.isAutonomous, _x.kp_roll, _x.ki_roll, _x.kd_roll, _x.target_stp_roll, _x.monitor_stp_roll, _x.kp_pitch, _x.ki_pitch, _x.kd_pitch, _x.target_stp_pitch, _x.monitor_stp_pitch, _x.kp_yaw, _x.ki_yaw, _x.kd_yaw, _x.target_stp_yaw, _x.monitor_stp_yaw, _x.kp_depth, _x.ki_depth, _x.kd_depth, _x.target_stp_depth, _x.monitor_stp_depth, _x.isRollLocked, _x.isYawLocked, _x.isPitchLocked, _x.isDepthLocked, _x.throttle, _x.thruster_FR, _x.thruster_FL, _x.thruster_CR, _x.thruster_CL, _x.thruster_BR, _x.thruster_BL, _x.thruster_BC))
      _x = self.PID_DepthMode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.PID_StabilizeMode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Mission1_Mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Mission2_Mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Mission3_Status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Mission4_Status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qB().pack(_x.stepper_degree, _x.pneumatic_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 285
      (_x.voltage, _x.pressure, _x.temperature, _x.actual_depth, _x.actual_roll, _x.actual_pitch, _x.actual_yaw, _x.isAutonomous, _x.kp_roll, _x.ki_roll, _x.kd_roll, _x.target_stp_roll, _x.monitor_stp_roll, _x.kp_pitch, _x.ki_pitch, _x.kd_pitch, _x.target_stp_pitch, _x.monitor_stp_pitch, _x.kp_yaw, _x.ki_yaw, _x.kd_yaw, _x.target_stp_yaw, _x.monitor_stp_yaw, _x.kp_depth, _x.ki_depth, _x.kd_depth, _x.target_stp_depth, _x.monitor_stp_depth, _x.isRollLocked, _x.isYawLocked, _x.isPitchLocked, _x.isDepthLocked, _x.throttle, _x.thruster_FR, _x.thruster_FL, _x.thruster_CR, _x.thruster_CL, _x.thruster_BR, _x.thruster_BL, _x.thruster_BC,) = _get_struct_7qB20q4B8q().unpack(str[start:end])
      self.isAutonomous = bool(self.isAutonomous)
      self.isRollLocked = bool(self.isRollLocked)
      self.isYawLocked = bool(self.isYawLocked)
      self.isPitchLocked = bool(self.isPitchLocked)
      self.isDepthLocked = bool(self.isDepthLocked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.PID_DepthMode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.PID_DepthMode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.PID_StabilizeMode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.PID_StabilizeMode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mission1_Mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Mission1_Mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mission2_Mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Mission2_Mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mission3_Status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Mission3_Status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Mission4_Status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Mission4_Status = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.stepper_degree, _x.pneumatic_status,) = _get_struct_qB().unpack(str[start:end])
      self.pneumatic_status = bool(self.pneumatic_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7qB20q4B8q = None
def _get_struct_7qB20q4B8q():
    global _struct_7qB20q4B8q
    if _struct_7qB20q4B8q is None:
        _struct_7qB20q4B8q = struct.Struct("<7qB20q4B8q")
    return _struct_7qB20q4B8q
_struct_qB = None
def _get_struct_qB():
    global _struct_qB
    if _struct_qB is None:
        _struct_qB = struct.Struct("<qB")
    return _struct_qB
