// Generated by gencpp from file communicator_pkg/CB2COM.msg
// DO NOT EDIT!


#ifndef COMMUNICATOR_PKG_MESSAGE_CB2COM_H
#define COMMUNICATOR_PKG_MESSAGE_CB2COM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace communicator_pkg
{
template <class ContainerAllocator>
struct CB2COM_
{
  typedef CB2COM_<ContainerAllocator> Type;

  CB2COM_()
    : isGYCalibrate(false)
    , throttle(0)  {
    }
  CB2COM_(const ContainerAllocator& _alloc)
    : isGYCalibrate(false)
    , throttle(0)  {
  (void)_alloc;
    }



   typedef uint8_t _isGYCalibrate_type;
  _isGYCalibrate_type isGYCalibrate;

   typedef int64_t _throttle_type;
  _throttle_type throttle;





  typedef boost::shared_ptr< ::communicator_pkg::CB2COM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::communicator_pkg::CB2COM_<ContainerAllocator> const> ConstPtr;

}; // struct CB2COM_

typedef ::communicator_pkg::CB2COM_<std::allocator<void> > CB2COM;

typedef boost::shared_ptr< ::communicator_pkg::CB2COM > CB2COMPtr;
typedef boost::shared_ptr< ::communicator_pkg::CB2COM const> CB2COMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::communicator_pkg::CB2COM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::communicator_pkg::CB2COM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::communicator_pkg::CB2COM_<ContainerAllocator1> & lhs, const ::communicator_pkg::CB2COM_<ContainerAllocator2> & rhs)
{
  return lhs.isGYCalibrate == rhs.isGYCalibrate &&
    lhs.throttle == rhs.throttle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::communicator_pkg::CB2COM_<ContainerAllocator1> & lhs, const ::communicator_pkg::CB2COM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace communicator_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::communicator_pkg::CB2COM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::communicator_pkg::CB2COM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::communicator_pkg::CB2COM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::communicator_pkg::CB2COM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communicator_pkg::CB2COM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communicator_pkg::CB2COM_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::communicator_pkg::CB2COM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9c462e883c2acef040f67c28782ebd8";
  }

  static const char* value(const ::communicator_pkg::CB2COM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9c462e883c2acefULL;
  static const uint64_t static_value2 = 0x040f67c28782ebd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::communicator_pkg::CB2COM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "communicator_pkg/CB2COM";
  }

  static const char* value(const ::communicator_pkg::CB2COM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::communicator_pkg::CB2COM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#GY Calibrate\n"
"bool isGYCalibrate\n"
"\n"
"# Throttle Values\n"
"int64 throttle\n"
;
  }

  static const char* value(const ::communicator_pkg::CB2COM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::communicator_pkg::CB2COM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isGYCalibrate);
      stream.next(m.throttle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CB2COM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::communicator_pkg::CB2COM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::communicator_pkg::CB2COM_<ContainerAllocator>& v)
  {
    s << indent << "isGYCalibrate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isGYCalibrate);
    s << indent << "throttle: ";
    Printer<int64_t>::stream(s, indent + "  ", v.throttle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMUNICATOR_PKG_MESSAGE_CB2COM_H
