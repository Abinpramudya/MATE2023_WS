// Generated by gencpp from file autonomous_pkg/decision_joy.msg
// DO NOT EDIT!


#ifndef AUTONOMOUS_PKG_MESSAGE_DECISION_JOY_H
#define AUTONOMOUS_PKG_MESSAGE_DECISION_JOY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autonomous_pkg
{
template <class ContainerAllocator>
struct decision_joy_
{
  typedef decision_joy_<ContainerAllocator> Type;

  decision_joy_()
    : leftX()
    , leftY()
    , rightX()
    , rightY()  {
    }
  decision_joy_(const ContainerAllocator& _alloc)
    : leftX(_alloc)
    , leftY(_alloc)
    , rightX(_alloc)
    , rightY(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _leftX_type;
  _leftX_type leftX;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _leftY_type;
  _leftY_type leftY;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _rightX_type;
  _rightX_type rightX;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _rightY_type;
  _rightY_type rightY;





  typedef boost::shared_ptr< ::autonomous_pkg::decision_joy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonomous_pkg::decision_joy_<ContainerAllocator> const> ConstPtr;

}; // struct decision_joy_

typedef ::autonomous_pkg::decision_joy_<std::allocator<void> > decision_joy;

typedef boost::shared_ptr< ::autonomous_pkg::decision_joy > decision_joyPtr;
typedef boost::shared_ptr< ::autonomous_pkg::decision_joy const> decision_joyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autonomous_pkg::decision_joy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autonomous_pkg::decision_joy_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autonomous_pkg::decision_joy_<ContainerAllocator1> & lhs, const ::autonomous_pkg::decision_joy_<ContainerAllocator2> & rhs)
{
  return lhs.leftX == rhs.leftX &&
    lhs.leftY == rhs.leftY &&
    lhs.rightX == rhs.rightX &&
    lhs.rightY == rhs.rightY;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autonomous_pkg::decision_joy_<ContainerAllocator1> & lhs, const ::autonomous_pkg::decision_joy_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autonomous_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autonomous_pkg::decision_joy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autonomous_pkg::decision_joy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_pkg::decision_joy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_pkg::decision_joy_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_pkg::decision_joy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_pkg::decision_joy_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autonomous_pkg::decision_joy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9cd6d3106c7945c1fc91abe6deb75e31";
  }

  static const char* value(const ::autonomous_pkg::decision_joy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9cd6d3106c7945c1ULL;
  static const uint64_t static_value2 = 0xfc91abe6deb75e31ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonomous_pkg::decision_joy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autonomous_pkg/decision_joy";
  }

  static const char* value(const ::autonomous_pkg::decision_joy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autonomous_pkg::decision_joy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string leftX\n"
"string leftY\n"
"string rightX\n"
"string rightY\n"
;
  }

  static const char* value(const ::autonomous_pkg::decision_joy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autonomous_pkg::decision_joy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leftX);
      stream.next(m.leftY);
      stream.next(m.rightX);
      stream.next(m.rightY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct decision_joy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonomous_pkg::decision_joy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autonomous_pkg::decision_joy_<ContainerAllocator>& v)
  {
    s << indent << "leftX: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.leftX);
    s << indent << "leftY: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.leftY);
    s << indent << "rightX: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.rightX);
    s << indent << "rightY: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.rightY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTONOMOUS_PKG_MESSAGE_DECISION_JOY_H
