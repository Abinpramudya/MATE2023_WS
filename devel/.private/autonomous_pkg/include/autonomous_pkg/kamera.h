// Generated by gencpp from file autonomous_pkg/kamera.msg
// DO NOT EDIT!


#ifndef AUTONOMOUS_PKG_MESSAGE_KAMERA_H
#define AUTONOMOUS_PKG_MESSAGE_KAMERA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autonomous_pkg
{
template <class ContainerAllocator>
struct kamera_
{
  typedef kamera_<ContainerAllocator> Type;

  kamera_()
    : object_label()
    , probability(0.0)
    , xmin_cv(0)
    , ymin_cv(0)
    , xmax_cv(0)
    , ymax_cv(0)
    , xcenter_cv(0.0)
    , ycenter_cv(0.0)
    , width(0)
    , height(0)  {
    }
  kamera_(const ContainerAllocator& _alloc)
    : object_label(_alloc)
    , probability(0.0)
    , xmin_cv(0)
    , ymin_cv(0)
    , xmax_cv(0)
    , ymax_cv(0)
    , xcenter_cv(0.0)
    , ycenter_cv(0.0)
    , width(0)
    , height(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_label_type;
  _object_label_type object_label;

   typedef double _probability_type;
  _probability_type probability;

   typedef int64_t _xmin_cv_type;
  _xmin_cv_type xmin_cv;

   typedef int64_t _ymin_cv_type;
  _ymin_cv_type ymin_cv;

   typedef int64_t _xmax_cv_type;
  _xmax_cv_type xmax_cv;

   typedef int64_t _ymax_cv_type;
  _ymax_cv_type ymax_cv;

   typedef double _xcenter_cv_type;
  _xcenter_cv_type xcenter_cv;

   typedef double _ycenter_cv_type;
  _ycenter_cv_type ycenter_cv;

   typedef int64_t _width_type;
  _width_type width;

   typedef int64_t _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::autonomous_pkg::kamera_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonomous_pkg::kamera_<ContainerAllocator> const> ConstPtr;

}; // struct kamera_

typedef ::autonomous_pkg::kamera_<std::allocator<void> > kamera;

typedef boost::shared_ptr< ::autonomous_pkg::kamera > kameraPtr;
typedef boost::shared_ptr< ::autonomous_pkg::kamera const> kameraConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autonomous_pkg::kamera_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autonomous_pkg::kamera_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autonomous_pkg::kamera_<ContainerAllocator1> & lhs, const ::autonomous_pkg::kamera_<ContainerAllocator2> & rhs)
{
  return lhs.object_label == rhs.object_label &&
    lhs.probability == rhs.probability &&
    lhs.xmin_cv == rhs.xmin_cv &&
    lhs.ymin_cv == rhs.ymin_cv &&
    lhs.xmax_cv == rhs.xmax_cv &&
    lhs.ymax_cv == rhs.ymax_cv &&
    lhs.xcenter_cv == rhs.xcenter_cv &&
    lhs.ycenter_cv == rhs.ycenter_cv &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autonomous_pkg::kamera_<ContainerAllocator1> & lhs, const ::autonomous_pkg::kamera_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autonomous_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autonomous_pkg::kamera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autonomous_pkg::kamera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_pkg::kamera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_pkg::kamera_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_pkg::kamera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_pkg::kamera_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autonomous_pkg::kamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16489477eaaf0dbca582174d9a0d8936";
  }

  static const char* value(const ::autonomous_pkg::kamera_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16489477eaaf0dbcULL;
  static const uint64_t static_value2 = 0xa582174d9a0d8936ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonomous_pkg::kamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autonomous_pkg/kamera";
  }

  static const char* value(const ::autonomous_pkg::kamera_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autonomous_pkg::kamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string object_label\n"
"float64 probability\n"
"int64 xmin_cv\n"
"int64 ymin_cv\n"
"int64 xmax_cv\n"
"int64 ymax_cv\n"
"float64 xcenter_cv\n"
"float64 ycenter_cv\n"
"int64 width\n"
"int64 height\n"
;
  }

  static const char* value(const ::autonomous_pkg::kamera_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autonomous_pkg::kamera_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_label);
      stream.next(m.probability);
      stream.next(m.xmin_cv);
      stream.next(m.ymin_cv);
      stream.next(m.xmax_cv);
      stream.next(m.ymax_cv);
      stream.next(m.xcenter_cv);
      stream.next(m.ycenter_cv);
      stream.next(m.width);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kamera_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonomous_pkg::kamera_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autonomous_pkg::kamera_<ContainerAllocator>& v)
  {
    s << indent << "object_label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_label);
    s << indent << "probability: ";
    Printer<double>::stream(s, indent + "  ", v.probability);
    s << indent << "xmin_cv: ";
    Printer<int64_t>::stream(s, indent + "  ", v.xmin_cv);
    s << indent << "ymin_cv: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ymin_cv);
    s << indent << "xmax_cv: ";
    Printer<int64_t>::stream(s, indent + "  ", v.xmax_cv);
    s << indent << "ymax_cv: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ymax_cv);
    s << indent << "xcenter_cv: ";
    Printer<double>::stream(s, indent + "  ", v.xcenter_cv);
    s << indent << "ycenter_cv: ";
    Printer<double>::stream(s, indent + "  ", v.ycenter_cv);
    s << indent << "width: ";
    Printer<int64_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int64_t>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTONOMOUS_PKG_MESSAGE_KAMERA_H
