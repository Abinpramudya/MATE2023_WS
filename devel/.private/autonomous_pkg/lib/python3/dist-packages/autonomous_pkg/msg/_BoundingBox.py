# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autonomous_pkg/BoundingBox.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BoundingBox(genpy.Message):
  _md5sum = "16489477eaaf0dbca582174d9a0d8936"
  _type = "autonomous_pkg/BoundingBox"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string object_label
float64 probability
int64 xmin_cv
int64 ymin_cv
int64 xmax_cv
int64 ymax_cv
float64 xcenter_cv
float64 ycenter_cv
int64 width
int64 height
"""
  __slots__ = ['object_label','probability','xmin_cv','ymin_cv','xmax_cv','ymax_cv','xcenter_cv','ycenter_cv','width','height']
  _slot_types = ['string','float64','int64','int64','int64','int64','float64','float64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_label,probability,xmin_cv,ymin_cv,xmax_cv,ymax_cv,xcenter_cv,ycenter_cv,width,height

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BoundingBox, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.object_label is None:
        self.object_label = ''
      if self.probability is None:
        self.probability = 0.
      if self.xmin_cv is None:
        self.xmin_cv = 0
      if self.ymin_cv is None:
        self.ymin_cv = 0
      if self.xmax_cv is None:
        self.xmax_cv = 0
      if self.ymax_cv is None:
        self.ymax_cv = 0
      if self.xcenter_cv is None:
        self.xcenter_cv = 0.
      if self.ycenter_cv is None:
        self.ycenter_cv = 0.
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
    else:
      self.object_label = ''
      self.probability = 0.
      self.xmin_cv = 0
      self.ymin_cv = 0
      self.xmax_cv = 0
      self.ymax_cv = 0
      self.xcenter_cv = 0.
      self.ycenter_cv = 0.
      self.width = 0
      self.height = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.object_label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d4q2d2q().pack(_x.probability, _x.xmin_cv, _x.ymin_cv, _x.xmax_cv, _x.ymax_cv, _x.xcenter_cv, _x.ycenter_cv, _x.width, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object_label = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.probability, _x.xmin_cv, _x.ymin_cv, _x.xmax_cv, _x.ymax_cv, _x.xcenter_cv, _x.ycenter_cv, _x.width, _x.height,) = _get_struct_d4q2d2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.object_label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d4q2d2q().pack(_x.probability, _x.xmin_cv, _x.ymin_cv, _x.xmax_cv, _x.ymax_cv, _x.xcenter_cv, _x.ycenter_cv, _x.width, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object_label = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.probability, _x.xmin_cv, _x.ymin_cv, _x.xmax_cv, _x.ymax_cv, _x.xcenter_cv, _x.ycenter_cv, _x.width, _x.height,) = _get_struct_d4q2d2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d4q2d2q = None
def _get_struct_d4q2d2q():
    global _struct_d4q2d2q
    if _struct_d4q2d2q is None:
        _struct_d4q2d2q = struct.Struct("<d4q2d2q")
    return _struct_d4q2d2q
